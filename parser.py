# python packages
from typing import Dict
import xml.etree.ElementTree as Tree

# switchcase package
from switchcase import switch

# dominate package
import dominate
from dominate import *
from dominate.tags import *

file: str = 'prueba.xml'
doc: document = dominate.document(title="Basic form on HTML generated by Blockly and Python")

tree = Tree.parse(file)
root = tree.getroot()

block_refs: Dict = {}
tag_refs: Dict = {}


def append_html(block):
    for case in switch(block.attrib.get('type')):
        if case("form_block"):
            with doc:
                tag = form()
                tag['name'] = block[0].text
                tag['action'] = block[1].text
                tag['method'] = block[2].text

        if case("button_block"):
            with doc:
                tag = button()
                tag['type'] = block[0].text
                tag['value'] = block[1].text
        if case("input_block"):
            with doc:
                tag = input_()
                tag['name'] = block[0].text
                tag['value'] = block[1].text
                tag['type'] = block[2].text
        if case("list_block"):
            with doc:
                ty = block[0]
                if ty == 'ol':
                    tag = ol()
                else:
                    tag = ul()

        if case("text_area"):
            with doc:
                tag = textarea
                tag['name'] = block[0]
                tag['form'] = block[1]
    else:
        print("No matching type %s" % (block.attrib.get('type')))


def get_block(xml_block: Tree.Element) -> Tree.Element:
    name = xml_block.attrib.get('type')
    assert xml_block is not None, "Something went wrong, a None block has been passed"
    for item in xml_block:
        if 'statement' in item.tag or 'next' in item.tag:
            append_html(xml_block)
            return item
        else:
            block_refs[name] = item
    return None


# current_block: Tree.Element = root[0]
# pointing_block: Tree.Element
# # while True:
# while current_block is not None:
#     for item in current_block:
#         item: Tree.Element
#         print("=========")
#         print(item.attrib['name'])
#         print(item.text)
#         print("=========\n")
#         if 'statement' in item.tag or 'next' in item.tag:
#             pointing_block = item[0]
#             print(pointing_block.tag)
#     # if pointing_block is not None:
#     try:
#         current_block = pointing_block
#     # else:
#     finally:
#         print("End reached")


current_block: Tree.Element
next_block: Tree.Element = root[0]
while next_block is not None:
    next_block = get_block(next_block)
    if next_block is not None:
        next_block = next_block[0]


# Doesnt seem very optimal, moving to the block function..
# for block in block_refs.keys():


## DEBUGING
def pretty(d, indent=0):
    for key, value in d.items():
        print('\t' * indent + str(key))
        if isinstance(value, dict):
            pretty(value, indent + 1)
        else:
            print('\t' * (indent + 1) + str(value))


print(pretty(block_refs, 0))
print(doc)
##
